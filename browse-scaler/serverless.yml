service: browse-scaler-${self:provider.stage}

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  environment:
    REDIS_HOST:
      "Fn::GetAtt": [ElasticCacheCluster, RedisEndpoint.Address]
resources:
  Resources:
    RedisSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Ingress for Redis Cluster
        VpcId: ${env:VPC_ID}
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1521
          ToPort: 1521
    RedisCacheSubnetGroup:
      Type: AWS::ElastiCache::SubnetGroup
      Properties:
        CacheSubnetGroupName: browse-scaler-${self:provider.stage}
        Description: 'Redis Cache Subnet Group'
        SubnetIds:
          - ${env:SUBNET_ID_A, 'subnetIdA'}
          - ${env:SUBNET_ID_B, 'subnetIdB'}
    RedisParameterGroup:
      Type: AWS::ElastiCache::ParameterGroup
      Properties:
        CacheParameterGroupFamily: redis7
        Description: 'Redis ElasticCache Parameter Group'
        Properties:
          maxmemory-policy: allkeys-lru
    ElasticCacheCluster:
      DependsOn: RedisSecurityGroup
      Type: AWS::ElastiCache::CacheCluster
      Properties:
        Engine: redis
        EngineVersion: '7.0'
        Port: 1521
        ClusterName: browse-scaler-${self:provider.stage}
        CacheNodeType: cache.t2.medium
        NumCacheNodes: 1
        # In transit encryption is not currenlty supported with the REDIS engine.
        # TransitEncryptionEnabled: true
        CacheParameterGroupName:
          Ref: RedisParameterGroup
        VpcSecurityGroupIds:
        - "Fn::GetAtt": RedisSecurityGroup.GroupId
        CacheSubnetGroupName:
          Ref: RedisCacheSubnetGroup
