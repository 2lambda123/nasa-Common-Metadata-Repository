service: graphdb-indexer
frameworkVersion: '3'
provider:
  name: aws
  region: us-east-1
  runtime: nodejs18.x
  stage: ${opt:stage, 'development'}

  iam:
    role: IamRoleGraphLambdaExecution

  deploymentBucket:
   name: graphdb-driver-deployment-bucket-${self:provider.stage}
   skipPolicySetup: true

  # vpc:
  #   securityGroupIds:
  #     - ${cf:${self:provider.stage}.servicesSecurityGroupId}
  #   subnetIds: !Split [',', '${cf:${self:provider.stage}.subnetIds}']

  environment: ${file(./serverless-configs/env.yml):${self:provider.stage}}

configValidationMode: error

plugins:
  - serverless-esbuild
  - serverless-offline-sqs
  - serverless-offline  

package:
  individually: true

functions:
  bootstrapGremlinServer:
    timeout: 900
    handler: serverless/src/bootstrapGremlinServer/handler.default

  indexCmrCollections:
    timeout: 600
    handler: serverless/src/indexCmrCollections/handler.default
    events:
      - sqs:
          batchSize: 10
          arn:
            Fn::GetAtt:
              - CollectionIndexingQueue
              - Arn

resources:
  Resources:
    CollectionIndexingQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: graphdb-indexer-${self:provider.stage}-CollectionIndexingQueue
        VisibilityTimeout: 300
        DelaySeconds: 5
        # RedrivePolicy:
        #   deadLetterTargetArn:
        #     Fn::GetAtt:
        #       - CollectionIndexingQueueDeadLetterQueue
        #       - Arn
        #   maxReceiveCount: 2 # Number of times a message will be tried before being dumped to the DLQ

    SqsQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: topic-subscription-${self:provider.environment.cmrConceptSnsTopic}
              Effect: Allow
              Principal:
                AWS: "*"
              Action:
                - sqs:SendMessage
              Resource: !GetAtt CollectionIndexingQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: ${self:provider.environment.cmrConceptSnsTopic}
        Queues:
          - !Ref CollectionIndexingQueue

    # CollectionIndexingQueueDeadLetterQueue:
    #   Type: AWS::SQS::Queue
    #   Properties:
    #     QueueName: graphdb-indexer-${self:provider.stage}-CollectionIndexingQueueDeadLetterQueue
    #     MessageRetentionPeriod: 1209600

    cmrSnsSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: ${self:provider.environment.cmrConceptSnsTopic}
        Endpoint: !GetAtt
          - CollectionIndexingQueue
          - Arn
        Protocol: sqs
        RawMessageDelivery: 'true'

    IamRoleGraphLambdaExecution:
      Type: AWS::IAM::Role
      Properties:
        RoleName: cmrGraphRole-${self:provider.stage}
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        PermissionsBoundary:
          Fn::Join: [
            "", [
              "arn:aws:iam::",
              {
                "Ref": "AWS::AccountId"
              },
              ":policy/NGAPShRoleBoundary"
            ]
          ]
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'lambda.amazonaws.com'
              Action:
                - 'sts:AssumeRole'

    cmrGraphPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
                - 'sqs:*'
              Effect: 'Allow'
              Resource: '*'
        PolicyName: cmrGraphPolicy-${self:provider.stage}
        Roles:
          - Ref: IamRoleGraphLambdaExecution

    cmrParamStorePolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
                - 'ssm:GetParameter*'
                - 'secretsmanager:GetSecretValue'
              Effect: 'Allow'
              Resource:
                - 'arn:aws:ssm:*:*:parameter/${self:provider.stage}/graph-db/*'
                - 'arn:aws:ssm:*:*:parameter/${self:provider.stage}/graph-db/*'
        PolicyName: cmrParamStorePolicy-${self:provider.stage}
        Roles:
          - Ref: IamRoleGraphLambdaExecution

custom:
  serverless-offline:
    reloadHandler: true
    useInProcess: true
    # useDocker: true

  minifyBuild:
    development: false
    production: true

  esbuild:
    bundle: true
    loader:
      .graphql: text
      .gql: text
    minify: ${self:custom.minifyBuild.${self:provider.stage}}
    exclude:
      - '@aws-sdk/client-lambda'
      - '@aws-sdk/client-sqs'
      - '@@aws-sdk/client-ssm'
    watch:
      pattern: ['src/**/*.js']

  serverless-offline-sqs:
    autoCreate: true
    apiVersion: '2012-11-05'
    endpoint: http://0.0.0.0:9324
    region: us-east-1
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false