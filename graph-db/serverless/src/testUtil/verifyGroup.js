import gremlin from 'gremlin'

const gremlinStatistics = gremlin.process.statics

export const verifyGroupExistInGraphDb = async (aclName, groupId) => {
  // verify the acl vertex with the given name exists
  const acl = await global.testGremlinConnection
    .V()
    .has('acl', 'name', aclName)
    .next()
  const { value: { id: aclId } } = acl
  expect(aclId).not.toBe(null) //acl id is, id generated by the graph for the vertex NOT concept id

  // verify the project vertex with the given name exists
  const group = await global.testGremlinConnection
    .V()
    .has('group', 'group_id', groupId)
    .next()
  const { value: { id: graphDbGroupid } } = group
  expect(graphDbGroupid).not.toBe(null) //refering to the graphDb's id not the group_id property

  // verify the ougoing edge exists to the acl from the group
  const record = await global.testGremlinConnection
    .V()
    .has('group', 'group_id', groupId)
    .outE('accessControlledBy')
    .filter(gremlinStatistics.inV()
      .has('acl', 'name', aclName))
    .next()
  const { value: { id: edgeId } } = record
  expect(edgeId).not.toBe(null)
}

export const verifyGroupNotExistInGraphDb = async (aclName, groupId) => {
  // verify the acl vertex with the given name does not exist
  const acl = await global.testGremlinConnection
    .V()
    .has('acl', 'name', aclName)
    .next()
  const { value: aclId } = acl
  expect(aclId).toBe(null)

  // verify the group vertex with the given group_id does not exist
  const group = await global.testGremlinConnection
    .V()
    .has('group', 'group_id', groupId)
    .next()
  const { value: groupvalue } = group
  expect(groupvalue).toBe(null) // Value refers to the payload returned by graphDb after a query
}

// TODO there needs to be a test to ensure that we can update the group property
export const verifyGroupPropertyUpdatesInGraphDb = async (aclName, groupId) => {
  // verify the acl vertex with the given name does not exist
  const acl = await global.testGremlinConnection
    .V()
    .has('acl', 'name', aclName)
    .next()
  const { value: aclId } = acl
  expect(aclId).not.toBe(null) // This acl should just not be null

  // verify the group vertex with the given group_id does not exist
  const group = await global.testGremlinConnection
    .V()
    .has('group', 'group_id', groupId)
    .values('permissions')
    .toList() // Terminal step that returns the list of permissions
  const { value: groupvalue } = group
  expect(groupvalue).toBe(null) // Value refers to the payload returned by graphDb after a query
  // I think that the value has to checked if it has been updated
}