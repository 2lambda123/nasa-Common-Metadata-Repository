import gremlin from 'gremlin'

const gremlinStatistics = gremlin.process.statics

export const verifyAclExistInGraphDb = async (aclName, linkedCollectionConceptId) => {
  // verify the acl vertex with the given name exists
  const acl = await global.testGremlinConnection
    .V()
    .has('acl', 'name', aclName)
    .next()
  const { value: { id: aclId } } = acl
  expect(aclId).not.toBe(null) //acl id is, id generated by the graph for the vertex NOT concept id

  // verify the ougoing edge exists fron the acl to the linked collection
  const record = await global.testGremlinConnection
    .V()
    .has('acl', 'name', aclName)
    .outE('hasAccessTo')
    .filter(gremlinStatistics.inV()
      .has('collection', 'id', linkedCollectionConceptId))
    .next()
  const { value: { id: edgeId } } = record
  expect(edgeId).not.toBe(null) //the collection must be in the graphdatabase already
}
// TODO test to ensure that ACL was in the graphDB
// test to ensure that the ACL is actually pointing to a collection
// TODO there could be a case where the collections don't exist but, then the acl should just not make edges as you would expect
